// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgDeliverNotional } from "./types/auction/tx";
import { MsgUpdateAuction } from "./types/auction/tx";
import { MsgDeleteAuction } from "./types/auction/tx";
import { MsgCreateAuction } from "./types/auction/tx";
import { MsgRevealBid } from "./types/auction/tx";
import { MsgBlindBid } from "./types/auction/tx";
import { MsgReviseBlindBid } from "./types/auction/tx";


export { MsgDeliverNotional, MsgUpdateAuction, MsgDeleteAuction, MsgCreateAuction, MsgRevealBid, MsgBlindBid, MsgReviseBlindBid };

type sendMsgDeliverNotionalParams = {
  value: MsgDeliverNotional,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateAuctionParams = {
  value: MsgUpdateAuction,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteAuctionParams = {
  value: MsgDeleteAuction,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateAuctionParams = {
  value: MsgCreateAuction,
  fee?: StdFee,
  memo?: string
};

type sendMsgRevealBidParams = {
  value: MsgRevealBid,
  fee?: StdFee,
  memo?: string
};

type sendMsgBlindBidParams = {
  value: MsgBlindBid,
  fee?: StdFee,
  memo?: string
};

type sendMsgReviseBlindBidParams = {
  value: MsgReviseBlindBid,
  fee?: StdFee,
  memo?: string
};


type msgDeliverNotionalParams = {
  value: MsgDeliverNotional,
};

type msgUpdateAuctionParams = {
  value: MsgUpdateAuction,
};

type msgDeleteAuctionParams = {
  value: MsgDeleteAuction,
};

type msgCreateAuctionParams = {
  value: MsgCreateAuction,
};

type msgRevealBidParams = {
  value: MsgRevealBid,
};

type msgBlindBidParams = {
  value: MsgBlindBid,
};

type msgReviseBlindBidParams = {
  value: MsgReviseBlindBid,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgDeliverNotional({ value, fee, memo }: sendMsgDeliverNotionalParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeliverNotional: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeliverNotional({ value: MsgDeliverNotional.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeliverNotional: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateAuction({ value, fee, memo }: sendMsgUpdateAuctionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateAuction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateAuction({ value: MsgUpdateAuction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateAuction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteAuction({ value, fee, memo }: sendMsgDeleteAuctionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteAuction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteAuction({ value: MsgDeleteAuction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteAuction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateAuction({ value, fee, memo }: sendMsgCreateAuctionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateAuction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateAuction({ value: MsgCreateAuction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateAuction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRevealBid({ value, fee, memo }: sendMsgRevealBidParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRevealBid: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRevealBid({ value: MsgRevealBid.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRevealBid: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBlindBid({ value, fee, memo }: sendMsgBlindBidParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBlindBid: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBlindBid({ value: MsgBlindBid.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBlindBid: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgReviseBlindBid({ value, fee, memo }: sendMsgReviseBlindBidParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgReviseBlindBid: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgReviseBlindBid({ value: MsgReviseBlindBid.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgReviseBlindBid: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgDeliverNotional({ value }: msgDeliverNotionalParams): EncodeObject {
			try {
				return { typeUrl: "/dflow.auction.MsgDeliverNotional", value: MsgDeliverNotional.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeliverNotional: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateAuction({ value }: msgUpdateAuctionParams): EncodeObject {
			try {
				return { typeUrl: "/dflow.auction.MsgUpdateAuction", value: MsgUpdateAuction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateAuction: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteAuction({ value }: msgDeleteAuctionParams): EncodeObject {
			try {
				return { typeUrl: "/dflow.auction.MsgDeleteAuction", value: MsgDeleteAuction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteAuction: Could not create message: ' + e.message)
			}
		},
		
		msgCreateAuction({ value }: msgCreateAuctionParams): EncodeObject {
			try {
				return { typeUrl: "/dflow.auction.MsgCreateAuction", value: MsgCreateAuction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateAuction: Could not create message: ' + e.message)
			}
		},
		
		msgRevealBid({ value }: msgRevealBidParams): EncodeObject {
			try {
				return { typeUrl: "/dflow.auction.MsgRevealBid", value: MsgRevealBid.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRevealBid: Could not create message: ' + e.message)
			}
		},
		
		msgBlindBid({ value }: msgBlindBidParams): EncodeObject {
			try {
				return { typeUrl: "/dflow.auction.MsgBlindBid", value: MsgBlindBid.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBlindBid: Could not create message: ' + e.message)
			}
		},
		
		msgReviseBlindBid({ value }: msgReviseBlindBidParams): EncodeObject {
			try {
				return { typeUrl: "/dflow.auction.MsgReviseBlindBid", value: MsgReviseBlindBid.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgReviseBlindBid: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			DflowAuction: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;